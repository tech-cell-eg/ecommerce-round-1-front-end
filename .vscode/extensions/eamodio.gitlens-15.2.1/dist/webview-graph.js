exports.id=795,exports.ids=[795],exports.modules={2055:(e,t,i)=>{i.d(t,{GraphWebviewProvider:()=>GraphWebviewProvider});var s=i(1398),r=i(5176),o=i(3900),a=i(3807),n=i(8803),h=i(4703),l=i(1885),p=i(9432),g=i(3708),d=i(3161),c=i(300),u=i(2013),m=i(8880),v=i(1310),f=i(236),w=i(9102),y=i(5287),b=i(5313),C=i(4693),R=i(304),P=i(6645),W=i(7788),S=i(2124),D=i(9634),_=i(3269),k=i(7587),G=i(6964),T=i(7899),I=i(4832),M=i(8973),O=i(6950),H=i(6707),F=i(560),V=i(4026),A=i(3395),B=i(3131),q=i(2471),L=i(4125),x=i(4118),E=i(1500),$=i(3355);let z="graph",N=["upstream","pullRequest","issue"],j=new $.Q2(z,"chooseRepository"),U=new $.Oz(z,"chooseRef"),Y=new $.Q2(z,"dblclick"),Z=new $.Q2(z,"avatars/get"),Q=new $.Q2(z,"refs/metadata/get"),J=new $.Q2(z,"rows/get"),K=new $.Q2(z,"pullRequest/openDetails"),X=new $.Q2(z,"search/openInView"),ee=new $.Q2(z,"columns/update"),et=new $.Q2(z,"refs/update/visibility"),ei=new $.Q2(z,"fitlers/update/excludeType"),es=new $.Q2(z,"configuration/update"),er=new $.Q2(z,"fitlers/update/includeOnlyRefs"),eo=new $.Q2(z,"selection/update"),ea=new $.Oz(z,"rows/ensure"),en=new $.Oz(z,"row/hover/get"),eh=new $.Oz(z,"search"),el=new $.C1(z,"didChange",!0,!0),ep=new $.C1(z,"configuration/didChange"),eg=new $.C1(z,"subscription/didChange"),ed=new $.C1(z,"avatars/didChange"),ec=new $.C1(z,"refs/didChangeMetadata"),eu=new $.C1(z,"columns/didChange"),em=new $.C1(z,"scrollMarkers/didChange"),ev=new $.C1(z,"refs/didChangeVisibility"),ef=new $.C1(z,"rows/didChange",void 0,!0),ew=new $.C1(z,"rows/stats/didChange"),ey=new $.C1(z,"selection/didChange"),eb=new $.C1(z,"workingTree/didChange"),eC=new $.C1(z,"didSearch"),eR=new $.C1(z,"didFetch");var eP=Object.defineProperty,eW=Object.getOwnPropertyDescriptor,eS=(e,t,i,s)=>{for(var r,o=s>1?void 0:s?eW(t,i):t,a=e.length-1;a>=0;a--)(r=e[a])&&(o=(s?r(t,i,o):r(o))||o);return s&&o&&eP(t,i,o),o};let eD={ref:{width:130,isHidden:!1,order:0},graph:{width:150,mode:void 0,isHidden:!1,order:1},message:{width:300,isHidden:!1,order:2},author:{width:130,isHidden:!1,order:3},changes:{width:200,isHidden:!1,order:4},datetime:{width:130,isHidden:!1,order:5},sha:{width:130,isHidden:!1,order:6}},e_={ref:{width:32,isHidden:!1},graph:{width:150,mode:"compact",isHidden:!1},author:{width:32,isHidden:!1,order:2},message:{width:500,isHidden:!1,order:3},changes:{width:200,isHidden:!1,order:4},datetime:{width:130,isHidden:!0,order:5},sha:{width:130,isHidden:!1,order:6}};let GraphWebviewProvider=class GraphWebviewProvider{constructor(e,t){this.container=e,this.host=t,this._showDetailsView=I.H.get("graph.showDetailsView"),this._theme=s.window.activeColorTheme,this.ensureRepositorySubscriptions(),this._disposable=s.Disposable.from(I.H.onDidChange(this.onConfigurationChanged,this),this.container.subscription.onDidChange(this.onSubscriptionChanged,this),this.container.git.onDidChangeRepositories(async()=>{this._etag!==this.container.git.etag&&(null==this._discovering||(this._etag=await this._discovering,this._etag!==this.container.git.etag))&&this.host.refresh(!0)}),s.window.onDidChangeActiveColorTheme(this.onThemeChanged,this),{dispose:()=>{null!=this._repositoryEventsDisposable&&(this._repositoryEventsDisposable.dispose(),this._repositoryEventsDisposable=void 0)}})}_repository;get repository(){return this._repository}set repository(e){if(this._repository===e){this.ensureRepositorySubscriptions();return}this._repository=e,this.resetRepositoryState(),this.ensureRepositorySubscriptions(!0),this.host.ready&&this.updateState()}_selection;get activeSelection(){return this._selection?.[0]}_discovering;_disposable;_etag;_etagSubscription;_etagRepository;_firstSelection=!0;_graph;_hoverCache=new Map;_hoverCancellation;_ipcNotificationMap=new Map([[eu,this.notifyDidChangeColumns],[ep,this.notifyDidChangeConfiguration],[el,this.notifyDidChangeState],[ev,this.notifyDidChangeRefsVisibility],[em,this.notifyDidChangeScrollMarkers],[ey,this.notifyDidChangeSelection],[eg,this.notifyDidChangeSubscription],[eb,this.notifyDidChangeWorkingTree],[eR,this.notifyDidFetch]]);_refsMetadata;_search;_searchCancellation;_selectedId;_selectedRows;_showDetailsView;_theme;_repositoryEventsDisposable;_lastFetchedDisposable;isWindowFocused=!0;dispose(){this._disposable.dispose()}canReuseInstance(...e){let t;if(1===this.container.git.openRepositoryCount)return!0;let[i]=e;return(0,D.Z6)(i)?t=i:eI(i)?t=this.container.git.getRepository(i.ref.repoPath):(0,E.c)(i)&&null!=i.state.selectedRepository&&(t=this.container.git.getRepository(i.state.selectedRepository)),t?.uri.toString()===this.repository?.uri.toString()||void 0}getSplitArgs(){return null!=this.repository?[this.repository]:[]}async onShowing(e,t,...i){this._firstSelection=!0,this._etag=this.container.git.etag,this.container.git.isDiscoveringRepositories&&(this._discovering=this.container.git.isDiscoveringRepositories.then(e=>(this._discovering=void 0,e)),this._etag=await this._discovering);let[s]=i;if((0,D.Z6)(s))this.repository=s;else if(eI(s)){this.repository=this.container.git.getRepository(s.ref.repoPath);let e=s.ref.ref;if((0,P.HH)(e)||(e=await this.container.git.resolveReference(s.ref.repoPath,e,void 0,{force:!0})),this.setSelectedRows(e),null!=this._graph){if(this._graph?.ids.has(e))return this.notifyDidChangeSelection(),!0;this.onGetMoreRows({id:e},!0)}}else if((0,E.c)(s)&&null!=s.state.selectedRepository&&(this.repository=this.container.git.getRepository(s.state.selectedRepository)),null==this.repository&&this.container.git.repositoryCount>1){let[t]=(0,o.qU)(a.Ts.ShowGraph,void 0,...i),s=Array.isArray(t)?t[0]:t;"scm"===s.type&&null!=s.scm.rootUri?this.repository=this.container.git.getRepository(s.scm.rootUri):"viewItem"===s.type&&s.node instanceof x.P&&(this.repository=s.node.repo),null!=this.repository&&!e&&this.host.ready&&this.updateState()}return!0}onRefresh(e){e&&this.resetRepositoryState()}includeBootstrap(){return this.getState(!0)}registerCommands(){let e=[];return this.host.isHost("view")&&e.push((0,T.Lb)(`${this.host.id}.refresh`,()=>this.host.refresh(!0)),(0,T.Lb)(`${this.host.id}.openInTab`,()=>void(0,T.RS)(a.Ts.ShowGraphPage,void 0,this.repository))),e.push(this.host.registerWebviewCommand("gitlens.graph.push",this.push),this.host.registerWebviewCommand("gitlens.graph.pull",this.pull),this.host.registerWebviewCommand("gitlens.graph.fetch",this.fetch),this.host.registerWebviewCommand("gitlens.graph.publishBranch",this.publishBranch),this.host.registerWebviewCommand("gitlens.graph.switchToAnotherBranch",this.switchToAnother),this.host.registerWebviewCommand("gitlens.graph.createBranch",this.createBranch),this.host.registerWebviewCommand("gitlens.graph.deleteBranch",this.deleteBranch),this.host.registerWebviewCommand("gitlens.graph.copyRemoteBranchUrl",e=>this.openBranchOnRemote(e,!0)),this.host.registerWebviewCommand("gitlens.graph.openBranchOnRemote",this.openBranchOnRemote),this.host.registerWebviewCommand("gitlens.graph.mergeBranchInto",this.mergeBranchInto),this.host.registerWebviewCommand("gitlens.graph.rebaseOntoBranch",this.rebase),this.host.registerWebviewCommand("gitlens.graph.rebaseOntoUpstream",this.rebaseToRemote),this.host.registerWebviewCommand("gitlens.graph.renameBranch",this.renameBranch),this.host.registerWebviewCommand("gitlens.graph.switchToBranch",this.switchTo),this.host.registerWebviewCommand("gitlens.graph.hideLocalBranch",this.hideRef),this.host.registerWebviewCommand("gitlens.graph.hideRemoteBranch",this.hideRef),this.host.registerWebviewCommand("gitlens.graph.hideRemote",e=>this.hideRef(e,{remote:!0})),this.host.registerWebviewCommand("gitlens.graph.hideRefGroup",e=>this.hideRef(e,{group:!0})),this.host.registerWebviewCommand("gitlens.graph.hideTag",this.hideRef),this.host.registerWebviewCommand("gitlens.graph.cherryPick",this.cherryPick),this.host.registerWebviewCommand("gitlens.graph.copyRemoteCommitUrl",e=>this.openCommitOnRemote(e,!0)),this.host.registerWebviewCommand("gitlens.graph.copyRemoteCommitUrl.multi",e=>this.openCommitOnRemote(e,!0)),this.host.registerWebviewCommand("gitlens.graph.openCommitOnRemote",this.openCommitOnRemote),this.host.registerWebviewCommand("gitlens.graph.openCommitOnRemote.multi",this.openCommitOnRemote),this.host.registerWebviewCommand("gitlens.graph.openSCM",this.openSCM),this.host.registerWebviewCommand("gitlens.graph.rebaseOntoCommit",this.rebase),this.host.registerWebviewCommand("gitlens.graph.resetCommit",this.resetCommit),this.host.registerWebviewCommand("gitlens.graph.resetToCommit",this.resetToCommit),this.host.registerWebviewCommand("gitlens.graph.resetToTip",this.resetToTip),this.host.registerWebviewCommand("gitlens.graph.revert",this.revertCommit),this.host.registerWebviewCommand("gitlens.graph.showInDetailsView",this.openInDetailsView),this.host.registerWebviewCommand("gitlens.graph.switchToCommit",this.switchTo),this.host.registerWebviewCommand("gitlens.graph.undoCommit",this.undoCommit),this.host.registerWebviewCommand("gitlens.graph.stash.save",this.saveStash),this.host.registerWebviewCommand("gitlens.graph.stash.apply",this.applyStash),this.host.registerWebviewCommand("gitlens.graph.stash.delete",this.deleteStash),this.host.registerWebviewCommand("gitlens.graph.stash.rename",this.renameStash),this.host.registerWebviewCommand("gitlens.graph.createTag",this.createTag),this.host.registerWebviewCommand("gitlens.graph.deleteTag",this.deleteTag),this.host.registerWebviewCommand("gitlens.graph.switchToTag",this.switchTo),this.host.registerWebviewCommand("gitlens.graph.createWorktree",this.createWorktree),this.host.registerWebviewCommand("gitlens.graph.createPullRequest",this.createPullRequest),this.host.registerWebviewCommand("gitlens.graph.openPullRequest",this.openPullRequest),this.host.registerWebviewCommand("gitlens.graph.openPullRequestChanges",this.openPullRequestChanges),this.host.registerWebviewCommand("gitlens.graph.openPullRequestComparison",this.openPullRequestComparison),this.host.registerWebviewCommand("gitlens.graph.openPullRequestOnRemote",this.openPullRequestOnRemote),this.host.registerWebviewCommand("gitlens.graph.openChangedFileDiffsWithMergeBase",this.openChangedFileDiffsWithMergeBase),this.host.registerWebviewCommand("gitlens.graph.compareWithUpstream",this.compareWithUpstream),this.host.registerWebviewCommand("gitlens.graph.compareWithHead",this.compareHeadWith),this.host.registerWebviewCommand("gitlens.graph.compareWithWorking",this.compareWorkingWith),this.host.registerWebviewCommand("gitlens.graph.compareWithMergeBase",this.compareWithMergeBase),this.host.registerWebviewCommand("gitlens.graph.compareAncestryWithWorking",this.compareAncestryWithWorking),this.host.registerWebviewCommand("gitlens.graph.copy",this.copy),this.host.registerWebviewCommand("gitlens.graph.copyMessage",this.copyMessage),this.host.registerWebviewCommand("gitlens.graph.copySha",this.copySha),this.host.registerWebviewCommand("gitlens.graph.addAuthor",this.addAuthor),this.host.registerWebviewCommand("gitlens.graph.columnAuthorOn",()=>this.toggleColumn("author",!0)),this.host.registerWebviewCommand("gitlens.graph.columnAuthorOff",()=>this.toggleColumn("author",!1)),this.host.registerWebviewCommand("gitlens.graph.columnDateTimeOn",()=>this.toggleColumn("datetime",!0)),this.host.registerWebviewCommand("gitlens.graph.columnDateTimeOff",()=>this.toggleColumn("datetime",!1)),this.host.registerWebviewCommand("gitlens.graph.columnShaOn",()=>this.toggleColumn("sha",!0)),this.host.registerWebviewCommand("gitlens.graph.columnShaOff",()=>this.toggleColumn("sha",!1)),this.host.registerWebviewCommand("gitlens.graph.columnChangesOn",()=>this.toggleColumn("changes",!0)),this.host.registerWebviewCommand("gitlens.graph.columnChangesOff",()=>this.toggleColumn("changes",!1)),this.host.registerWebviewCommand("gitlens.graph.columnGraphOn",()=>this.toggleColumn("graph",!0)),this.host.registerWebviewCommand("gitlens.graph.columnGraphOff",()=>this.toggleColumn("graph",!1)),this.host.registerWebviewCommand("gitlens.graph.columnMessageOn",()=>this.toggleColumn("message",!0)),this.host.registerWebviewCommand("gitlens.graph.columnMessageOff",()=>this.toggleColumn("message",!1)),this.host.registerWebviewCommand("gitlens.graph.columnRefOn",()=>this.toggleColumn("ref",!0)),this.host.registerWebviewCommand("gitlens.graph.columnRefOff",()=>this.toggleColumn("ref",!1)),this.host.registerWebviewCommand("gitlens.graph.columnGraphCompact",()=>this.setColumnMode("graph","compact")),this.host.registerWebviewCommand("gitlens.graph.columnGraphDefault",()=>this.setColumnMode("graph",void 0)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerLocalBranchOn",()=>this.toggleScrollMarker("localBranches",!0)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerLocalBranchOff",()=>this.toggleScrollMarker("localBranches",!1)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerRemoteBranchOn",()=>this.toggleScrollMarker("remoteBranches",!0)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerRemoteBranchOff",()=>this.toggleScrollMarker("remoteBranches",!1)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerStashOn",()=>this.toggleScrollMarker("stashes",!0)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerStashOff",()=>this.toggleScrollMarker("stashes",!1)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerTagOn",()=>this.toggleScrollMarker("tags",!0)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerTagOff",()=>this.toggleScrollMarker("tags",!1)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerPullRequestOn",()=>this.toggleScrollMarker("pullRequests",!0)),this.host.registerWebviewCommand("gitlens.graph.scrollMarkerPullRequestOff",()=>this.toggleScrollMarker("pullRequests",!1)),this.host.registerWebviewCommand("gitlens.graph.copyDeepLinkToBranch",this.copyDeepLinkToBranch),this.host.registerWebviewCommand("gitlens.graph.copyDeepLinkToCommit",this.copyDeepLinkToCommit),this.host.registerWebviewCommand("gitlens.graph.copyDeepLinkToRepo",this.copyDeepLinkToRepo),this.host.registerWebviewCommand("gitlens.graph.copyDeepLinkToTag",this.copyDeepLinkToTag),this.host.registerWebviewCommand("gitlens.graph.shareAsCloudPatch",this.shareAsCloudPatch),this.host.registerWebviewCommand("gitlens.graph.openChangedFiles",this.openFiles),this.host.registerWebviewCommand("gitlens.graph.openOnlyChangedFiles",this.openOnlyChangedFiles),this.host.registerWebviewCommand("gitlens.graph.openChangedFileDiffs",e=>this.openAllChanges(e)),this.host.registerWebviewCommand("gitlens.graph.openChangedFileDiffsWithWorking",e=>this.openAllChangesWithWorking(e)),this.host.registerWebviewCommand("gitlens.graph.openChangedFileDiffsIndividually",e=>this.openAllChanges(e,!0)),this.host.registerWebviewCommand("gitlens.graph.openChangedFileDiffsWithWorkingIndividually",e=>this.openAllChangesWithWorking(e,!0)),this.host.registerWebviewCommand("gitlens.graph.openChangedFileRevisions",this.openRevisions),this.host.registerWebviewCommand("gitlens.graph.resetColumnsDefault",()=>this.updateColumns(eD)),this.host.registerWebviewCommand("gitlens.graph.resetColumnsCompact",()=>this.updateColumns(e_)),this.host.registerWebviewCommand("gitlens.graph.copyWorkingChangesToWorktree",this.copyWorkingChangesToWorktree)),e}onWindowFocusChanged(e){this.isWindowFocused=e}onFocusChanged(e){this._showActiveSelectionDetailsDebounced?.cancel(),e&&null!=this.activeSelection&&this.container.commitDetailsView.visible&&this.showActiveSelectionDetails()}onVisibilityChanged(e){if(e||this._showActiveSelectionDetailsDebounced?.cancel(),e&&(null!=this.repository&&this.repository.etag!==this._etagRepository||this.container.subscription.etag!==this._etagSubscription)){this.updateState(!0);return}if(e){this.host.sendPendingIpcNotifications();let{activeSelection:e}=this;if(null==e)return;this.showActiveSelectionDetails()}}onMessageReceived(e){switch(!0){case j.is(e):this.onChooseRepository();break;case U.is(e):this.onChooseRef(U,e);break;case Y.is(e):this.onDoubleClick(e.params);break;case ea.is(e):this.onEnsureRowRequest(ea,e);break;case Z.is(e):this.onGetMissingAvatars(e.params);break;case Q.is(e):this.onGetMissingRefMetadata(e.params);break;case J.is(e):this.onGetMoreRows(e.params);break;case en.is(e):this.onHoverRowRequest(en,e);break;case K.is(e):this.onOpenPullRequestDetails(e.params);break;case eh.is(e):this.onSearchRequest(eh,e);break;case X.is(e):this.onSearchOpenInView(e.params);break;case ee.is(e):this.onColumnsChanged(e.params);break;case es.is(e):this.updateGraphConfig(e.params);break;case et.is(e):this.onRefsVisibilityChanged(e.params);break;case eo.is(e):this.onSelectionChanged(e.params);break;case ei.is(e):this.updateExcludedType(this._graph,e.params);break;case er.is(e):this.updateIncludeOnlyRefs(this._graph,e.params.refs)}}updateGraphConfig(e){let t;let i=this.getComponentConfig();for(t in e.changes)if(i[t]!==e.changes[t])switch(t){case"minimap":I.H.updateEffective("graph.minimap.enabled",e.changes[t]);break;case"minimapDataType":I.H.updateEffective("graph.minimap.dataType",e.changes[t]);break;case"minimapMarkerTypes":{let i=[];for(let s of e.changes[t]??[])switch(s){case"localBranches":case"remoteBranches":case"stashes":case"tags":case"pullRequests":i.push(s)}I.H.updateEffective("graph.minimap.additionalTypes",i);break}case"dimMergeCommits":I.H.updateEffective("graph.dimMergeCommits",e.changes[t]);break;case"onlyFollowFirstParent":I.H.updateEffective("graph.onlyFollowFirstParent",e.changes[t])}}_showActiveSelectionDetailsDebounced=void 0;showActiveSelectionDetails(){null==this._showActiveSelectionDetailsDebounced&&(this._showActiveSelectionDetailsDebounced=(0,F.sg)(this.showActiveSelectionDetailsCore.bind(this),250)),this._showActiveSelectionDetailsDebounced()}showActiveSelectionDetailsCore(){let{activeSelection:e}=this;null!=e&&this.host.active&&this.container.events.fire("commit:selected",{commit:e,interaction:"passive",preserveFocus:!0,preserveVisibility:!1===this._showDetailsView},{source:this.host.id})}onConfigurationChanged(e){if(I.H.changed(e,"graph.showDetailsView")&&(this._showDetailsView=I.H.get("graph.showDetailsView")),I.H.changed(e,"graph.commitOrdering")){this.updateState();return}(I.H.changed(e,"defaultDateFormat")||I.H.changed(e,"defaultDateStyle")||I.H.changed(e,"advanced.abbreviatedShaLength")||I.H.changed(e,"graph"))&&(this.notifyDidChangeConfiguration(),(I.H.changed(e,"graph.onlyFollowFirstParent")||(I.H.changed(e,"graph.minimap.enabled")||I.H.changed(e,"graph.minimap.dataType"))&&I.H.get("graph.minimap.enabled")&&"lines"===I.H.get("graph.minimap.dataType")&&!this._graph?.includes?.stats)&&this.updateState())}onRepositoryChanged(e){if(!e.changed(D.Z_.Config,D.Z_.Head,D.Z_.Heads,D.Z_.Remotes,D.Z_.Stash,D.Z_.Status,D.Z_.Tags,D.Z_.Unknown,D.Ti.Any)){this._etagRepository=e.repository.etag;return}e.changed(D.Z_.Head,D.Ti.Any)&&this.setSelectedRows(void 0),this.updateState(!e.changed(D.Z_.Unknown,D.Ti.Exclusive))}onRepositoryFileSystemChanged(e){e.repository?.path===this.repository?.path&&this.notifyDidChangeWorkingTree()}onSubscriptionChanged(e){e.etag!==this._etagSubscription&&(this._etagSubscription=e.etag,this.notifyDidChangeSubscription())}onThemeChanged(e){null!=this._theme&&((0,q.g4)(e)&&(0,q.g4)(this._theme)||(0,q.kH)(e)&&(0,q.kH)(this._theme))||(this._theme=e,this.updateState())}onColumnsChanged(e){this.updateColumns(e.config)}onRefsVisibilityChanged(e){this.updateExcludedRefs(this._graph,e.refs,e.visible)}onDoubleClick(e){if("ref"===e.type&&e.ref.context){let t=this.getGraphItemContext(e.ref.context);if(eT(t)){if(null!=e.metadata){if(t=this.getGraphItemContext(e.metadata.data.context),"upstream"===e.metadata.type&&eG(t,"upstreamStatus")){let{ahead:e,behind:i,ref:s}=t.webviewItemValue;if(i>0)return void d.a$(s.repoPath,s);if(e>0)return void d.VC(s.repoPath,!1,s)}else if("pullRequest"===e.metadata.type&&eG(t,"pullrequest"))return void this.openPullRequestOnRemote(t);return}let{ref:i}=t.webviewItemValue;return"head"===e.ref.refType&&e.ref.isCurrentHead?d.S_(i.repoPath):d.S_(i.repoPath,i,!!I.H.isUnset("gitCommands.skipConfirmations")||void 0)}}else if("row"===e.type&&e.row){this._showActiveSelectionDetailsDebounced?.cancel();let t=this.getRevisionReference(this.repository?.path,e.row.id,e.row.type);if(null!=t){this.container.events.fire("commit:selected",{commit:t,interaction:"active",preserveFocus:e.preserveFocus,preserveVisibility:!1},{source:this.host.id});let i=this.host.isHost("editor")?this.container.commitDetailsView:this.container.graphDetailsView;i.ready||i.show({preserveFocus:e.preserveFocus},{commit:t,interaction:"active",preserveVisibility:!1})}}return Promise.resolve()}async onHoverRowRequest(e,t){let i={id:t.params.id,cancelled:!0};if(null!=this._hoverCancellation&&this._hoverCancellation.cancel(),null!=this._graph){let e=t.params.id,r=this._hoverCache.get(e);if(null==r){let i;let o=new s.CancellationTokenSource;this._hoverCancellation=o;let a=!0;switch(t.params.type){case"work-dir-changes":a=!1,i=await this.container.git.getCommit(this._graph.repoPath,b.SU);break;case"stash-node":{let e=await this.container.git.getStash(this._graph.repoPath);i=e?.commits.get(t.params.id);break}default:i=await this.container.git.getCommit(this._graph.repoPath,t.params.id)}if(null!=i&&!o.token.isCancellationRequested){let t=this._graph.rowsStats?.get(i.sha);null!=t&&(i=i.with({stats:{...i.stats,additions:t.additions,deletions:t.deletions,changedFiles:i.stats?.changedFiles?i.stats.changedFiles:t.files}})),r=this.getCommitTooltip(i,o.token).catch(t=>{throw this._hoverCache.delete(e),t}),a&&this._hoverCache.set(e,r)}}if(null!=r)try{i.markdown=await r,i.cancelled=!1}catch{}}this.host.respond(e,t,i)}async getCommitTooltip(e,t){let i,s,r;let[o,a]=await Promise.allSettled([this.container.git.getBestRemotesWithProviders(e.repoPath),e.ensureFullDetails()]);if(t.isCancellationRequested)throw new n.AL;let h=(0,B.Ro)(o,[]),[l]=h;if(l?.hasIntegration()){let[r,o]=await Promise.allSettled([(0,B.zu)(e.getEnrichedAutolinks(l),t),e.getAssociatedPullRequest(l)]);if(t.isCancellationRequested)throw new n.AL;let a=(0,B.Ro)(r);a?.paused||(i=a?.value),s=(0,B.Ro)(o)}return r=(0,y.kk)(e)?I.H.get("views.formats.stashes.tooltip"):I.H.get("views.formats.commits.tooltip"),await f.c.fromTemplateAsync(r,e,{enrichedAutolinks:i,dateFormat:I.H.get("defaultDateFormat"),getBranchAndTagTips:this.getBranchAndTagTips.bind(this),messageAutolinks:!0,messageIndent:4,pullRequest:s,outputFormat:"markdown",remotes:h})}getBranchAndTagTips(e,t){if(null==this._graph)return;let i=this._graph.rows.find(t=>t.sha===e);if(null==i)return;let s=[];return i.heads?.length&&s.push(...i.heads.map(e=>t?.icons?`$(git-branch) ${e.name}`:e.name)),i.remotes?.length&&s.push(...i.remotes.map(e=>{let i=`${e.owner?`${e.owner}/`:""}${e.name}`;return t?.icons?`$(${function(e){switch(e){case"azureDevops":return"gitlens-provider-azdo";case"bitbucket":case"bitbucketServer":return"gitlens-provider-bitbucket";case"github":case"githubEnterprise":return"gitlens-provider-github";case"gitlab":case"gitlabSelfHosted":return"gitlens-provider-gitlab";default:return"cloud"}}(e.hostingServiceType)}) ${i}`:i})),i.tags?.length&&s.push(...i.tags.map(e=>t?.icons?`$(tag) ${e.name}`:e.name)),s.join(", ")||void 0}async onEnsureRowRequest(e,t){let i,s;if(null==this._graph)return;let r=t.params,o=this._graph.remappedIds?.get(r.id)??r.id;this._graph.ids.has(o)?(i=r.id,s=r.id!==o?o:void 0):(await this.updateGraphWithMoreRows(this._graph,o,this._search),this.notifyDidChangeRows(),this._graph.ids.has(o)&&(i=r.id,s=r.id!==o?o:void 0)),this.host.respond(e,t,{id:i,remapped:s})}async onGetMissingAvatars(e){if(null==this._graph)return;let t=this._graph.repoPath;async function i(e,i){let s=await (0,r.m_)(e,{ref:i,repoPath:t});this._graph.avatars.set(e,s.toString(!0))}let s=[];for(let[t,r]of Object.entries(e.emails))this._graph.avatars.has(t)||s.push(i.call(this,t,r));s.length&&(await Promise.allSettled(s),this.updateAvatars())}async onGetMissingRefMetadata(e){if(null==this._graph||null===this._refsMetadata||!M.SD("gitlens:repos:withHostingIntegrationsConnected")?.includes(this._graph.repoPath))return;let t=this._graph.repoPath;async function i(e,i){null==this._refsMetadata&&(this._refsMetadata=new Map);let s=(await this.container.git.getBranches(t,{filter:t=>t.id===e}))?.values?.[0],r={...this._refsMetadata.get(e)};if(null==s){for(let t of i)r[t]=null,this._refsMetadata.set(e,r);return}for(let o of i){if(!N.includes(o)){r[o]=null,this._refsMetadata.set(e,r);continue}if("pullRequest"===o){let i=await s?.getAssociatedPullRequest();if(null==i){(void 0===r.pullRequest||r.pullRequest?.length===0)&&(r.pullRequest=null),this._refsMetadata.set(e,r);continue}let o={hostingServiceType:i.provider.id,id:Number.parseInt(i.id)||0,title:i.title,author:i.author.name,date:(i.mergedDate??i.closedDate??i.updatedDate)?.getTime(),state:i.state,url:i.url,context:(0,L.C9)({webviewItem:`gitlens:pullrequest${i.refs?"+refs":""}`,webviewItemValue:{type:"pullrequest",id:i.id,url:i.url,repoPath:t,refs:i.refs,provider:{id:i.provider.id,name:i.provider.name,domain:i.provider.domain,icon:i.provider.icon}}})};r.pullRequest=[o],this._refsMetadata.set(e,r);continue}if("upstream"===o){let t=s?.upstream;if(null==t||void 0==t||t.missing){r.upstream=null,this._refsMetadata.set(e,r);continue}let i={name:(0,w.km)(t.name),owner:(0,w.Zq)(t.name),ahead:s.state.ahead,behind:s.state.behind,context:(0,L.C9)({webviewItem:"gitlens:upstreamStatus",webviewItemValue:{type:"upstreamStatus",ref:(0,P.iw)(s),ahead:s.state.ahead,behind:s.state.behind}})};r.upstream=i,this._refsMetadata.set(e,r)}}}let s=[];for(let t of Object.keys(e.metadata))s.push(i.call(this,t,e.metadata[t]));s.length&&await Promise.allSettled(s),this.updateRefsMetadata()}async onGetMoreRows(e,t=!1){if(this._graph?.paging!=null){if(this._graph?.more==null||this.repository?.etag!==this._etagRepository){this.updateState(!0);return}await this.updateGraphWithMoreRows(this._graph,e.id,this._search),this.notifyDidChangeRows(t)}}async onOpenPullRequestDetails(e){let t=this.repository;if(null==t)return;let i=await t.getBranch();if(null==i)return;let s=await i.getAssociatedPullRequest();if(null!=s)return this.container.pullRequestView.showPullRequest(s,i)}async onSearchRequest(e,t){try{let i=await this.getSearchResults(t.params);this.host.respond(e,t,i)}catch(i){this.host.respond(e,t,{results:i instanceof n.AL?void 0:{error:i instanceof v.Do?"Invalid search pattern":"Unexpected error"}})}}async getSearchResults(e){if(null==e.search)return this.resetSearchState(),{results:void 0};let t=this._search;if(e.more&&t?.more!=null&&t.comparisonKey===(0,_.b4)(e.search))return null!=(t=await t.more(e.limit??I.H.get("graph.searchItemLimit")??100))?(this._search=t,await this.ensureSearchStartsInRange(this._graph,t),{results:t.results.size>0?{ids:Object.fromEntries((0,V.Tj)(t.results,([e,t])=>[this._graph?.remappedIds?.get(e)??e,t])),count:t.results.size,paging:{hasMore:t.paging?.hasMore??!1}}:void 0}):{results:void 0};if(null==t||t.comparisonKey!==(0,_.b4)(e.search)){if(null==this.repository)return{results:{error:"No repository"}};this.repository.etag!==this._etagRepository&&this.updateState(!0),null!=this._searchCancellation&&this._searchCancellation.cancel();let i=new s.CancellationTokenSource;this._searchCancellation=i;try{t=await this.repository.searchCommits(e.search,{limit:I.H.get("graph.searchItemLimit")??100,ordering:I.H.get("graph.commitOrdering"),cancellation:i.token})}catch(e){throw this._search=void 0,e}if(i.token.isCancellationRequested)throw new n.AL;this._search=t}else t=this._search;let i=await this.ensureSearchStartsInRange(this._graph,t),r=!1;return null!=i&&(r=!0,this.setSelectedRows(i)),{results:0===t.results.size?{count:0}:{ids:Object.fromEntries((0,V.Tj)(t.results,([e,t])=>[this._graph?.remappedIds?.get(e)??e,t])),count:t.results.size,paging:{hasMore:t.paging?.hasMore??!1}},selectedRows:r?this._selectedRows:void 0}}onSearchOpenInView(e){null!=this.repository&&this.container.searchAndCompareView.search(this.repository.path,e.search,{label:{label:`for ${e.search.query}`},reveal:{select:!0,focus:!1,expand:!0}})}async onChooseRepository(){let e=this.container.git.openRepositories.sort((e,t)=>(e===this.repository?1:-1)-(t===this.repository?1:-1)||(e.starred?-1:1)-(t.starred?-1:1)||e.index-t.index),t=await (0,G.oe)(`Switch Repository ${a.EO.Dot} ${this.repository?.name}`,"Choose a repository to switch to",e);null!=t&&(this.repository=t)}async onChooseRef(e,t){let i;if(null==this.repository)return this.host.respond(e,t,void 0);if(t.params.alt)i=await (0,k.N)(this.repository.path,`Jump to Reference ${a.EO.Dot} ${this.repository?.name}`,"Choose a reference to jump to",{include:k.m.BranchesAndTags});else{let e=(0,V.I6)(this._graph.branches.values(),e=>e.current);null==e&&(e=await this.repository.getBranch()),null!=e&&(i=e)}return this.host.respond(e,t,i?.sha!=null?{name:i.name,sha:i.sha}:void 0)}_fireSelectionChangedDebounced=void 0;onSelectionChanged(e){this._showActiveSelectionDetailsDebounced?.cancel();let t=e.selection[0];this.setSelectedRows(t?.id),null==this._fireSelectionChangedDebounced&&(this._fireSelectionChangedDebounced=(0,F.sg)(this.fireSelectionChanged.bind(this),50)),this._fireSelectionChangedDebounced(t?.id,t?.type)}fireSelectionChanged(e,t){if(null==this.repository)return;let i=this.getRevisionReference(this.repository.path,e,t),s=null!=i?[i]:void 0;this._selection=s,null!=s&&(!(!this._firstSelection&&this.host.isHost("editor"))||this.host.active)&&(this.container.events.fire("commit:selected",{commit:s[0],interaction:"passive",preserveFocus:!0,preserveVisibility:this._firstSelection?!1===this._showDetailsView:"selection"!==this._showDetailsView},{source:this.host.id}),this._firstSelection=!1)}_notifyDidChangeStateDebounced=void 0;getRevisionReference(e,t,i){if(null!=e&&null!=t)switch(i){case"stash-node":return(0,P.kA)(t,e,{refType:"stash",name:t,number:void 0});case"work-dir-changes":return(0,P.kA)(b.SU,e,{refType:"revision"});default:return(0,P.kA)(t,e,{refType:"revision"})}}updateState(e=!1){if(this.host.clearPendingIpcNotifications(),e){this.notifyDidChangeState();return}null==this._notifyDidChangeStateDebounced&&(this._notifyDidChangeStateDebounced=(0,F.sg)(this.notifyDidChangeState.bind(this),250)),this._notifyDidChangeStateDebounced()}_notifyDidChangeAvatarsDebounced=void 0;updateAvatars(e=!1){if(e){this.notifyDidChangeAvatars();return}null==this._notifyDidChangeAvatarsDebounced&&(this._notifyDidChangeAvatarsDebounced=(0,F.sg)(this.notifyDidChangeAvatars.bind(this),100)),this._notifyDidChangeAvatarsDebounced()}async notifyDidChangeAvatars(){if(null==this._graph)return;let e=this._graph;return this.host.notify(ed,{avatars:Object.fromEntries(e.avatars)})}_notifyDidChangeRefsMetadataDebounced=void 0;updateRefsMetadata(e=!1){if(e){this.notifyDidChangeRefsMetadata();return}null==this._notifyDidChangeRefsMetadataDebounced&&(this._notifyDidChangeRefsMetadataDebounced=(0,F.sg)(this.notifyDidChangeRefsMetadata.bind(this),100)),this._notifyDidChangeRefsMetadataDebounced()}async notifyDidChangeRefsMetadata(){return this.host.notify(ec,{metadata:null!=this._refsMetadata?Object.fromEntries(this._refsMetadata):this._refsMetadata})}async notifyDidChangeColumns(){if(!this.host.ready||!this.host.visible)return this.host.addPendingIpcNotification(eu,this._ipcNotificationMap,this),!1;let e=this.getColumns(),t=this.getColumnSettings(e);return this.host.notify(eu,{columns:t,context:this.getColumnHeaderContext(t),settingsContext:this.getGraphSettingsIconContext(t)})}async notifyDidChangeScrollMarkers(){if(!this.host.ready||!this.host.visible)return this.host.addPendingIpcNotification(em,this._ipcNotificationMap,this),!1;let e=this.getColumns(),t=this.getColumnSettings(e);return this.host.notify(em,{context:this.getGraphSettingsIconContext(t)})}async notifyDidChangeRefsVisibility(){return this.host.ready&&this.host.visible?this.host.notify(ev,{excludeRefs:this.getExcludedRefs(this._graph),excludeTypes:this.getExcludedTypes(this._graph),includeOnlyRefs:this.getIncludeOnlyRefs(this._graph)}):(this.host.addPendingIpcNotification(ev,this._ipcNotificationMap,this),!1)}async notifyDidChangeConfiguration(){return this.host.ready&&this.host.visible?this.host.notify(ep,{config:this.getComponentConfig()}):(this.host.addPendingIpcNotification(ep,this._ipcNotificationMap,this),!1)}async notifyDidFetch(){if(!this.host.ready||!this.host.visible)return this.host.addPendingIpcNotification(eR,this._ipcNotificationMap,this),!1;let e=await this.repository.getLastFetched();return this.host.notify(eR,{lastFetched:new Date(e)})}async notifyDidChangeRows(e=!1,t){if(null==this._graph)return;let i=this._graph;return this.host.notify(ef,{rows:i.rows,avatars:Object.fromEntries(i.avatars),downstreams:Object.fromEntries(i.downstreams),refsMetadata:null!=this._refsMetadata?Object.fromEntries(this._refsMetadata):this._refsMetadata,rowsStats:i.rowsStats?.size?Object.fromEntries(i.rowsStats):void 0,rowsStatsLoading:i.rowsStatsDeferred?.isLoaded!=null&&!i.rowsStatsDeferred.isLoaded(),selectedRows:e?this._selectedRows:void 0,paging:{startingCursor:i.paging?.startingCursor,hasMore:i.paging?.hasMore??!1}},t)}async notifyDidChangeRowsStats(e){if(null!=e.rowsStats)return this.host.notify(ew,{rowsStats:Object.fromEntries(e.rowsStats),rowsStatsLoading:e.rowsStatsDeferred?.isLoaded!=null&&!e.rowsStatsDeferred.isLoaded()})}async notifyDidChangeWorkingTree(){return this.host.ready&&this.host.visible?this.host.notify(eb,{stats:await this.getWorkingTreeStats()??{added:0,deleted:0,modified:0}}):(this.host.addPendingIpcNotification(eb,this._ipcNotificationMap,this),!1)}async notifyDidChangeSelection(){return this.host.ready&&this.host.visible?this.host.notify(ey,{selection:this._selectedRows??{}}):(this.host.addPendingIpcNotification(ey,this._ipcNotificationMap,this),!1)}async notifyDidChangeSubscription(){if(!this.host.ready||!this.host.visible)return this.host.addPendingIpcNotification(eg,this._ipcNotificationMap,this),!1;let[e]=await this.getGraphAccess();return this.host.notify(eg,{subscription:e.subscription.current,allowed:!1!==e.allowed})}async notifyDidChangeState(){return this.host.ready&&this.host.visible?(this._notifyDidChangeStateDebounced?.cancel(),this.host.notify(el,{state:await this.getState()})):(this.host.addPendingIpcNotification(el,this._ipcNotificationMap,this),!1)}ensureRepositorySubscriptions(e){if(this.ensureLastFetchedSubscription(e),!e&&null!=this._repositoryEventsDisposable)return;null!=this._repositoryEventsDisposable&&(this._repositoryEventsDisposable.dispose(),this._repositoryEventsDisposable=void 0);let t=this.repository;null!=t&&(this._repositoryEventsDisposable=s.Disposable.from(t.onDidChange(this.onRepositoryChanged,this),t.watchFileSystem(1e3),t.onDidChangeFileSystem(this.onRepositoryFileSystemChanged,this),(0,M.wt)(e=>{"gitlens:repos:withHostingIntegrationsConnected"===e&&(this.resetRefsMetadata(),this.updateRefsMetadata())})))}async ensureLastFetchedSubscription(e){if(!e&&null!=this._lastFetchedDisposable)return;null!=this._lastFetchedDisposable&&(this._lastFetchedDisposable.dispose(),this._lastFetchedDisposable=void 0);let t=this.repository;if(null==t)return;let i=await t.getLastFetched()??0,s=D.LN.getLastFetchedUpdateInterval(i);0!==i&&s>0&&(this._lastFetchedDisposable=(0,F.gC)(()=>{let e=D.LN.getLastFetchedUpdateInterval(i);s!==D.LN.getLastFetchedUpdateInterval(i)&&(s=e),this.notifyDidFetch()},s))}async ensureSearchStartsInRange(e,t){let i;if(0!==t.results.size){for(let s of t.results.keys()){let t=e.remappedIds?.get(s)??s;if(e.ids.has(t))return t;i=t;break}if(null!=i)return await this.updateGraphWithMoreRows(e,i),this.notifyDidChangeRows(),e.ids.has(i)?i:void 0}}getColumns(){return this.container.storage.getWorkspace("graph:columns")}getExcludedTypes(e){if(null!=e)return this.getFiltersByRepo(e)?.excludeTypes}getExcludedRefs(e){let t;if(null==e)return;let i=this.container.storage.getWorkspace("graph:hiddenRefs");if(null!=i&&0!==Object.keys(i).length){for(let e in t=this.container.storage.getWorkspace("graph:filtersByRepo")??{},i){let s=e.split("|",1)[0];t[s]=t[s]??{},t[s].excludeRefs=(0,A.Y8)(t[s].excludeRefs,e,i[e])}this.container.storage.storeWorkspace("graph:filtersByRepo",t),this.container.storage.deleteWorkspace("graph:hiddenRefs")}let s=(t?.[e.repoPath]??this.getFiltersByRepo(e))?.excludeRefs;if(null==s||0===Object.keys(s).length)return;let r=I.H.get("graph.avatars",void 0,!0),o={},a=e=>this.host.asWebviewUri(e);for(let t in s){let i={...s[t]};if("remote"===i.type&&i.owner){let t=e.remotes.get(i.owner);null!=t&&(i.avatarUrl=((r?t.provider?.avatarUri:void 0)??W.Wf(this.container,t,a))?.toString(!0))}o[t]=i}return o}getIncludeOnlyRefs(e){if(null==e)return;let t=this.getFiltersByRepo(e),i=t?.includeOnlyRefs;if(null==i||0===Object.keys(i).length)return;let s={};for(let[t,r]of Object.entries(i)){let i;if("HEAD"===r.id){if(null==(i=(0,V.I6)(e.branches.values(),e=>e.current)))continue;s[i.id]={...r,id:i.id,name:i.name}}else s[t]=r;if("head"===r.type&&(i=i??e.branches.get(r.name),i?.upstream!=null&&!i.upstream.missing)){let t=(0,w.Yk)(e.repoPath,!0,i.upstream.name);s[t]={id:t,type:"remote",name:(0,w.km)(i.upstream.name),owner:(0,w.Zq)(i.upstream.name)}}}return s}getFiltersByRepo(e){if(null==e)return;let t=this.container.storage.getWorkspace("graph:filtersByRepo");return t?.[e.repoPath]}getColumnSettings(e){let t={...eD};if(null!=e)for(let[i,s]of Object.entries(e))t[i]={...eD[i],...s};return t}getColumnHeaderContext(e){return(0,L.C9)({webviewItem:"gitlens:graph:columns",webviewItemValue:this.getColumnContextItems(e).join(",")})}getGraphSettingsIconContext(e){return(0,L.C9)({webviewItem:"gitlens:graph:settings",webviewItemValue:this.getSettingsIconContextItems(e).join(",")})}getColumnContextItems(e){let t=[],i=["author","changes","datetime","graph","message","ref","sha"],s=0;for(let[r,o]of Object.entries(e))i.includes(r)&&(!o.isHidden&&s++,t.push(`column:${r}:${o.isHidden?"hidden":"visible"}${o.mode?`+${o.mode}`:""}`));return s>1&&t.push("columns:canHide"),t}getSettingsIconContextItems(e){let t=null!=e?this.getColumnContextItems(e):[];if(I.H.get("graph.scrollMarkers.enabled")){let e=I.H.get("graph.scrollMarkers.additionalTypes");for(let i of["localBranches","remoteBranches","stashes","tags","pullRequests"])t.push(`scrollMarker:${i}:${e.includes(i)?"enabled":"disabled"}`)}return t}getComponentConfig(){return{avatars:I.H.get("graph.avatars"),dateFormat:I.H.get("graph.dateFormat")??I.H.get("defaultDateFormat")??"short+short",dateStyle:I.H.get("graph.dateStyle")??I.H.get("defaultDateStyle"),enabledRefMetadataTypes:this.getEnabledRefMetadataTypes(),dimMergeCommits:I.H.get("graph.dimMergeCommits"),enableMultiSelection:this.container.prereleaseOrDebugging,highlightRowsOnRefHover:I.H.get("graph.highlightRowsOnRefHover"),minimap:I.H.get("graph.minimap.enabled"),minimapDataType:I.H.get("graph.minimap.dataType"),minimapMarkerTypes:this.getMinimapMarkerTypes(),onlyFollowFirstParent:I.H.get("graph.onlyFollowFirstParent"),scrollRowPadding:I.H.get("graph.scrollRowPadding"),scrollMarkerTypes:this.getScrollMarkerTypes(),showGhostRefsOnRowHover:I.H.get("graph.showGhostRefsOnRowHover"),showRemoteNamesOnRefs:I.H.get("graph.showRemoteNames"),idLength:I.H.get("advanced.abbreviatedShaLength")}}getScrollMarkerTypes(){return I.H.get("graph.scrollMarkers.enabled")?["selection","highlights","head","upstream",...I.H.get("graph.scrollMarkers.additionalTypes")]:[]}getMinimapMarkerTypes(){return I.H.get("graph.minimap.enabled")?["selection","highlights","head","upstream",...I.H.get("graph.minimap.additionalTypes")]:[]}getEnabledRefMetadataTypes(){let e=[];return I.H.get("graph.pullRequests.enabled")&&e.push("pullRequest"),I.H.get("graph.showUpstreamStatus")&&e.push("upstream"),e}async getGraphAccess(){let e=await this.container.git.access(h.k.Graph,this.repository?.path);this._etagSubscription=this.container.subscription.etag,!1===e.allowed&&null==e.subscription.current.previewTrial&&(e=await this.container.git.access(h.k.Graph,this.repository?.path));let t=e?.visibility;return null==t&&null!=this.repository&&(t=await this.container.git.visibility(this.repository?.path)),[e,t]}getGraphItemContext(e){let t="string"==typeof e?JSON.parse(e):e;return null==t||"webview"in t||(t.webview=this.host.id),t}async getWorkingTreeStats(){if(null==this.repository||0===this.container.git.repositoryCount)return;let e=await this.container.git.getStatusForRepo(this.repository.path),t=e?.getDiffStatus();return{added:t?.added??0,deleted:t?.deleted??0,modified:t?.changed??0,context:(0,L.C9)({webviewItem:"gitlens:wip",webviewItemValue:{type:"commit",ref:this.getRevisionReference(this.repository.path,b.SU,"work-dir-changes")}})}}async getState(e){var t;let i,s;if(0===this.container.git.repositoryCount||null==this.repository&&(this.repository=this.container.git.getBestRepositoryOrFirst(),null==this.repository))return{...this.host.baseWebviewState,allowed:!0,repositories:[]};this._etagRepository=this.repository?.etag,this.host.title=`${this.host.originalTitle}: ${this.repository.formattedName}`;let{defaultItemLimit:r}=I.H.get("graph"),o=Math.max(r,this._graph?.ids.size??r),a=this._selectedId,n=null==a||a===b.SU?"HEAD":a,h=this.getColumns(),l=this.getColumnSettings(h),p=this.container.git.getCommitsForGraph(this.repository.uri,e=>this.host.asWebviewUri(e),{include:{stats:I.H.get("graph.minimap.enabled")&&"lines"===I.H.get("graph.minimap.dataType")||!l.changes.isHidden},limit:o,ref:n}),g=Promise.allSettled([this.getGraphAccess(),this.getWorkingTreeStats(),this.repository.getBranch(),this.repository.getLastFetched()]);e?queueMicrotask(async()=>{let e=await p;this.setGraph(e),a!==b.SU&&this.setSelectedRows(e.id),this.notifyDidChangeRefsVisibility(),this.notifyDidChangeRows(!0)}):(i=await p,this.setGraph(i),a!==b.SU&&this.setSelectedRows(i.id));let[d,c,u,m]=await g,[v,f]=(0,B.Ro)(d)??[],w=(0,B.Ro)(u);if(null!=w&&(s={...w.state},null!=w.upstream)){s.upstream=w.upstream.name;let[e,t]=await Promise.allSettled([w.getRemote(),w.getAssociatedPullRequest()]),i=(0,B.Ro)(e);i?.provider!=null&&(s.provider={name:i.provider.name,icon:"remote"===i.provider.icon?"cloud":i.provider.icon,url:i.provider.url({type:S.J.Repo})});let r=(0,B.Ro)(t);null!=r&&(s.pr=(0,R.pf)(r))}return{...this.host.baseWebviewState,windowFocused:this.isWindowFocused,repositories:0===(t=this.container.git.openRepositories).length?[]:t.map(e=>({formattedName:e.formattedName,id:e.id,name:e.name,path:e.path,isVirtual:e.provider.virtual})),selectedRepository:this.repository.path,selectedRepositoryVisibility:f,branchName:w?.name,branchState:s,lastFetched:new Date((0,B.Ro)(m)),selectedRows:this._selectedRows,subscription:v?.subscription.current,allowed:(v?.allowed??!1)!==!1,avatars:null!=i?Object.fromEntries(i.avatars):void 0,refsMetadata:null===this.resetRefsMetadata()?null:{},loading:e,rowsStatsLoading:i?.rowsStatsDeferred?.isLoaded!=null&&!i.rowsStatsDeferred.isLoaded(),rows:i?.rows,downstreams:null!=i?Object.fromEntries(i.downstreams):void 0,paging:null!=i?{startingCursor:i.paging?.startingCursor,hasMore:i.paging?.hasMore??!1}:void 0,columns:l,config:this.getComponentConfig(),context:{header:this.getColumnHeaderContext(l),settings:this.getGraphSettingsIconContext(l)},excludeRefs:null!=i?this.getExcludedRefs(i)??{}:{},excludeTypes:this.getExcludedTypes(i)??{},includeOnlyRefs:null!=i?this.getIncludeOnlyRefs(i)??{}:{},nonce:this.host.cspNonce,workingTreeStats:(0,B.Ro)(c)??{added:0,deleted:0,modified:0}}}updateColumns(e){let t=this.container.storage.getWorkspace("graph:columns");for(let[i,s]of Object.entries(e))t=(0,A.Y8)(t,i,s);this.container.storage.storeWorkspace("graph:columns",t),this.notifyDidChangeColumns()}updateExcludedRefs(e,t,i){if(null==t||0===t.length)return;let s=this.getFiltersByRepo(e)?.excludeRefs??{};for(let e of t)s=(0,A.Y8)(s,e.id,i?void 0:{id:e.id,type:e.type,name:e.name,owner:e.owner});this.updateFiltersByRepo(e,{excludeRefs:s}),this.notifyDidChangeRefsVisibility()}updateFiltersByRepo(e,t){if(null==e)throw Error("Cannot save repository filters since Graph is undefined");let i=this.container.storage.getWorkspace("graph:filtersByRepo");return this.container.storage.storeWorkspace("graph:filtersByRepo",(0,A.Y8)(i,e.repoPath,{...i?.[e.repoPath],...t}))}updateIncludeOnlyRefs(e,t){let i;if(null==t||0===t.length){if(this.getFiltersByRepo(e)?.includeOnlyRefs==null)return;i=void 0}else for(let e of(i={},t))i[e.id]={id:e.id,type:e.type,name:e.name,owner:e.owner};this.updateFiltersByRepo(e,{includeOnlyRefs:i}),this.notifyDidChangeRefsVisibility()}updateExcludedType(e,{key:t,value:i}){let s=this.getFiltersByRepo(e)?.excludeTypes;(null!=s&&0!==Object.keys(s).length||!1!==i)&&(s=(0,A.Y8)(s,t,i),this.updateFiltersByRepo(e,{excludeTypes:s}),this.notifyDidChangeRefsVisibility())}resetHoverCache(){this._hoverCache.clear(),this._hoverCancellation?.dispose(),this._hoverCancellation=void 0}resetRefsMetadata(){return this._refsMetadata=(0,M.SD)("gitlens:repos:withHostingIntegrationsConnected")?void 0:null,this._refsMetadata}resetRepositoryState(){this.setGraph(void 0),this.setSelectedRows(void 0)}resetSearchState(){this._search=void 0,this._searchCancellation?.dispose(),this._searchCancellation=void 0}setSelectedRows(e){this._selectedId!==e&&(this._selectedId=e,e===b.SU&&(e="work-dir-changes"),this._selectedRows=null!=e?{[e]:!0}:void 0)}setGraph(e){this._graph=e,null==e?(this.resetHoverCache(),this.resetRefsMetadata(),this.resetSearchState()):e.rowsStatsDeferred?.promise.then(()=>void this.notifyDidChangeRowsStats(e))}async updateGraphWithMoreRows(e,t,i){let{defaultItemLimit:s,pageItemLimit:r}=I.H.get("graph"),o=await e.more?.(r??s,t);if(null!=o){if(this.setGraph(o),!i?.paging?.hasMore)return;let e=V.HV(i.results)?.[0];if(null==e)return;let t=o.remappedIds?.get(e)??e;o.ids.has(t)&&queueMicrotask(async()=>{try{let e=await this.getSearchResults({search:i.query,more:!0});this.host.notify(eC,e)}catch(e){if(e instanceof n.AL)return;this.host.notify(eC,{results:{error:e instanceof v.Do?"Invalid search pattern":"Unexpected error"}})}})}}fetch(e){let t=null!=e?this.getGraphItemRef(e,"branch"):void 0;d.hd(this.repository,t)}pull(e){let t=null!=e?this.getGraphItemRef(e,"branch"):void 0;d.a$(this.repository,t)}push(e){let t=null!=e?this.getGraphItemRef(e):void 0;d.VC(this.repository,void 0,t)}createBranch(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():l.vt(t.repoPath,t)}deleteBranch(e){if(eT(e,"branch")){let{ref:t}=e.webviewItemValue;return l.TF(t.repoPath,t)}return Promise.resolve()}mergeBranchInto(e){if(eT(e,"branch")){let{ref:t}=e.webviewItemValue;return d.h1(t.repoPath,t)}return Promise.resolve()}openBranchOnRemote(e,t){if(eT(e,"branch")){let i;let{ref:s}=e.webviewItemValue;return s.remote?i=(0,w.Zq)(s.name):null!=s.upstream&&(i=(0,w.Zq)(s.upstream.name)),(0,T.RS)(a.Ts.OpenOnRemote,{repoPath:s.repoPath,resource:{type:S.J.Branch,branch:s.name},remote:i,clipboard:t})}return Promise.resolve()}publishBranch(e){if(eT(e,"branch")){let{ref:t}=e.webviewItemValue;return d.VC(t.repoPath,void 0,t)}return Promise.resolve()}rebase(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():d.RU(t.repoPath,t)}rebaseToRemote(e){if(eT(e,"branch")){let{ref:t}=e.webviewItemValue;if(null!=t.upstream)return d.RU(t.repoPath,(0,P.kA)(t.upstream.name,t.repoPath,{refType:"branch",name:t.upstream.name,remote:!0}))}return Promise.resolve()}renameBranch(e){if(eT(e,"branch")){let{ref:t}=e.webviewItemValue;return l.$w(t.repoPath,t)}return Promise.resolve()}cherryPick(e){let t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():d.$T(t.repoPath,t)}async copy(e){let t;let{selection:i}=this.getGraphItemRefs(e);if(i.length)t=i.map(e=>"revision"===e.refType&&e.message?`${e.name}: ${e.message.trim()}`:e.name).join("\n");else if(eG(e,"contributor")){let{name:i,email:s}=e.webviewItemValue;t=`${i}${s?` <${s}>`:""}`}else if(eG(e,"pullrequest")){let{url:i}=e.webviewItemValue;t=i}null!=t&&await s.env.clipboard.writeText(t)}copyMessage(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():(0,T.RS)(a.Ts.CopyMessageToClipboard,{repoPath:t.repoPath,sha:t.ref,message:"message"in t?t.message:void 0})}async copySha(e){let t=this.getGraphItemRef(e);if(null==t)return Promise.resolve();let i=t.ref;return(0,P.HH)(i)||(i=await this.container.git.resolveReference(t.repoPath,i,void 0,{force:!0})),(0,T.RS)(a.Ts.CopyShaToClipboard,{sha:i})}openInDetailsView(e){let t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():this.host.isHost("view")?void(0,p.tl)(t,{preserveFocus:!0,preserveVisibility:!1}):(0,T.RS)(a.Ts.ShowInDetailsView,{ref:t})}openSCM(e){return null==this.getGraphItemRef(e,"revision")?Promise.resolve():(0,T.S4)("workbench.view.scm")}openCommitOnRemote(e,t){let{selection:i}=this.getGraphItemRefs(e,"revision");return null==i?Promise.resolve():(0,T.RS)(a.Ts.OpenOnRemote,{repoPath:i[0].repoPath,resource:i.map(e=>({type:S.J.Commit,sha:e.ref})),clipboard:t})}copyDeepLinkToBranch(e){if(eT(e,"branch")){let{ref:t}=e.webviewItemValue;return(0,T.RS)(a.Ts.CopyDeepLinkToBranch,{refOrRepoPath:t})}return Promise.resolve()}copyDeepLinkToCommit(e){let t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():(0,T.RS)(a.Ts.CopyDeepLinkToCommit,{refOrRepoPath:t})}copyDeepLinkToRepo(e){if(eT(e,"branch")){let{ref:t}=e.webviewItemValue;return t.remote?(0,T.RS)(a.Ts.CopyDeepLinkToRepo,{refOrRepoPath:t.repoPath,remote:(0,w.Zq)(t.name)}):Promise.resolve()}return Promise.resolve()}copyDeepLinkToTag(e){if(eT(e,"tag")){let{ref:t}=e.webviewItemValue;return(0,T.RS)(a.Ts.CopyDeepLinkToTag,{refOrRepoPath:t})}return Promise.resolve()}async shareAsCloudPatch(e){let t=this.getGraphItemRef(e,"revision")??this.getGraphItemRef(e,"stash");return null==t?Promise.resolve():(0,T.RS)(a.Ts.CreateCloudPatch,{to:t.ref,repoPath:t.repoPath})}resetCommit(e){let t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():d.cL(t.repoPath,(0,P.kA)(`${t.ref}^`,t.repoPath,{refType:"revision",name:`${t.name}^`,message:t.message}))}resetToCommit(e){let t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():d.cL(t.repoPath,t)}resetToTip(e){let t=this.getGraphItemRef(e,"branch");return null==t?Promise.resolve():d.cL(t.repoPath,(0,P.kA)(t.ref,t.repoPath,{refType:"revision",name:t.name}))}revertCommit(e){let t=this.getGraphItemRef(e,"revision");return null==t?Promise.resolve():d.ru(t.repoPath,t)}switchTo(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():d.S_(t.repoPath,t)}hideRef(e,t){var i;let s;if(t?.group&&null!=(i=e)&&null!=i&&(0,L.PH)(i)&&("gitlens.graph"===i.webview||"gitlens.views.graph"===i.webview)&&"object"==typeof i.webviewItemGroupValue&&"refGroup"===i.webviewItemGroupValue.type)({refs:s}=e.webviewItemGroupValue);else if(!t?.group&&eT(e)){let{ref:t}=e.webviewItemValue;null!=t.id&&(s=[t])}return null!=s&&this.updateExcludedRefs(this._graph,s.map(e=>{let i="branch"===e.refType&&e.remote;return{id:e.id,name:i?t?.remote?"*":(0,w.km)(e.name):e.name,owner:i?(0,w.Zq)(e.name):void 0,type:"branch"===e.refType?e.remote?"remote":"head":"tag"}}),!1),Promise.resolve()}switchToAnother(e){let t=this.getGraphItemRef(e);return null==t?d.S_(this.repository?.path):d.S_(t.repoPath)}async undoCommit(e){let t=this.getGraphItemRef(e,"revision");if(null==t)return Promise.resolve();await (0,p.MQ)(this.container,t)}saveStash(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():c.VC(t.repoPath)}applyStash(e){let t=this.getGraphItemRef(e,"stash");return null==t?Promise.resolve():c.Bb(t.repoPath,t)}deleteStash(e){let t=this.getGraphItemRef(e,"stash");return null==t?Promise.resolve():c.gv(t.repoPath,[t])}renameStash(e){let t=this.getGraphItemRef(e,"stash");return null==t?Promise.resolve():c.$w(t.repoPath,t)}async createTag(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():u.vt(t.repoPath,t)}deleteTag(e){if(eT(e,"tag")){let{ref:t}=e.webviewItemValue;return u.TF(t.repoPath,t)}return Promise.resolve()}async createWorktree(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():m.vt(t.repoPath,void 0,t)}async createPullRequest(e){if(eT(e,"branch")){let{ref:t}=e.webviewItemValue,i=this.container.git.getRepository(t.repoPath),s=await i?.getBranch(t.name),r=await s?.getRemote();return(0,T.ph)("createPullRequest",{repoPath:t.repoPath,remote:null!=r?{name:r.name,provider:null!=r.provider?{id:r.provider.id,name:r.provider.name,domain:r.provider.domain}:void 0,url:r.url}:void 0,branch:{name:t.name,upstream:t.upstream?.name,isRemote:t.remote}})}return Promise.resolve()}openPullRequest(e){if(eG(e,"pullrequest")){let t=e.webviewItemValue;return(0,T.ph)("openPullRequest",{repoPath:t.repoPath,provider:{id:t.provider.id,name:t.provider.name,domain:t.provider.domain},pullRequest:{id:t.id,url:t.url}})}return Promise.resolve()}async openPullRequestChanges(e){if(eG(e,"pullrequest")){let t=e.webviewItemValue;if(t.refs?.base!=null&&null!=t.refs.head){let e=await (0,R.tI)(this.container,t.repoPath,t.refs);return(0,p.$5)(this.container,{repoPath:e.repoPath,lhs:e.base.ref,rhs:e.head.ref},{title:`Changes in Pull Request #${t.id}`})}}return Promise.resolve()}async openPullRequestComparison(e){if(eG(e,"pullrequest")){let t=e.webviewItemValue;if(t.refs?.base!=null&&null!=t.refs.head){let e=await (0,R.tI)(this.container,t.repoPath,t.refs);return this.container.searchAndCompareView.compare(e.repoPath,e.head,e.base)}}return Promise.resolve()}openPullRequestOnRemote(e,t){if(eG(e,"pullrequest")){let{url:i}=e.webviewItemValue;return(0,T.RS)(a.Ts.OpenPullRequestOnRemote,{pr:{url:i},clipboard:t})}return Promise.resolve()}async compareAncestryWithWorking(e){let t=this.getGraphItemRef(e);if(null==t)return Promise.resolve();let i=await this.container.git.getBranch(t.repoPath);if(null==i)return;let s=await this.container.git.getMergeBase(t.repoPath,i.ref,t.ref);if(null!=s)return this.container.searchAndCompareView.compare(t.repoPath,"",{ref:s,label:`${i.ref} (${(0,P.pV)(s)})`})}compareHeadWith(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():this.container.searchAndCompareView.compare(t.repoPath,"HEAD",t.ref)}async compareWithMergeBase(e){let t=this.getGraphItemRef(e);if(null==t)return Promise.resolve();let i=await this.container.git.getBranch(t.repoPath);if(null==i)return;let s=await this.container.git.getMergeBase(t.repoPath,i.ref,t.ref);if(null!=s)return this.container.searchAndCompareView.compare(t.repoPath,t.ref,{ref:s,label:`${i.ref} (${(0,P.pV)(s)})`})}async openChangedFileDiffsWithMergeBase(e){let t=this.getGraphItemRef(e);if(null==t)return Promise.resolve();let i=await this.container.git.getBranch(t.repoPath);if(null==i)return;let s=await this.container.git.getMergeBase(t.repoPath,i.ref,t.ref);if(null!=s)return(0,p.$5)(this.container,{repoPath:t.repoPath,lhs:s,rhs:t.ref},{title:`Changes between ${i.ref} (${(0,P.pV)(s)}) ${a.EO.ArrowLeftRightLong} ${(0,P.pV)(t.ref,{strings:{working:"Working Tree"}})}`})}compareWithUpstream(e){if(eT(e,"branch")){let{ref:t}=e.webviewItemValue;if(null!=t.upstream)return this.container.searchAndCompareView.compare(t.repoPath,t.ref,t.upstream.name)}return Promise.resolve()}compareWorkingWith(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():this.container.searchAndCompareView.compare(t.repoPath,"",t.ref)}copyWorkingChangesToWorktree(e){let t=this.getGraphItemRef(e);return null==t?Promise.resolve():m.PB("working-tree",t.repoPath)}async openFiles(e){let t=await this.getCommitFromGraphItemRef(e);if(null!=t)return(0,p.Km)(t)}async openAllChanges(e,t){let i=await this.getCommitFromGraphItemRef(e);if(null!=i)return t?(0,p.LH)(i):(0,p.po)(i)}async openAllChangesWithWorking(e,t){let i=await this.getCommitFromGraphItemRef(e);if(null!=i)return t?(0,p.Ce)(i):(0,p.Gu)(i)}async openRevisions(e){let t=await this.getCommitFromGraphItemRef(e);if(null!=t)return(0,p.m)(t)}async openOnlyChangedFiles(e){let t=await this.getCommitFromGraphItemRef(e);if(null!=t)return(0,p.E9)(t)}addAuthor(e){if(eG(e,"contributor")){let{repoPath:t,name:i,email:s,current:r}=e.webviewItemValue;return g.s(t,new C.sL(t,i,s,0,void 0,r))}return Promise.resolve()}async toggleColumn(e,t){let i=this.container.storage.getWorkspace("graph:columns"),s=i?.[e];null!=s?s.isHidden=!t:s={isHidden:!t},i=(0,A.Y8)(i,e,s),await this.container.storage.storeWorkspace("graph:columns",i),this.notifyDidChangeColumns(),"changes"!==e||s.isHidden||this._graph?.includes?.stats||this.updateState()}async toggleScrollMarker(e,t){let i=I.H.get("graph.scrollMarkers.additionalTypes"),s=!1;t&&!i.includes(e)?(i=i.concat(e),s=!0):!t&&i.includes(e)&&(i=i.filter(t=>t!==e),s=!0),s&&(await I.H.updateEffective("graph.scrollMarkers.additionalTypes",i),this.notifyDidChangeScrollMarkers())}async setColumnMode(e,t){let i=this.container.storage.getWorkspace("graph:columns"),s=i?.[e];null!=s?s.mode=t:s={mode:t},i=(0,A.Y8)(i,e,s),await this.container.storage.storeWorkspace("graph:columns",i),this.notifyDidChangeColumns()}getCommitFromGraphItemRef(e){let t=this.getGraphItemRef(e,"revision");return null!=t||null!=(t=this.getGraphItemRef(e,"stash"))?this.container.git.getCommit(t.repoPath,t.ref):Promise.resolve(void 0)}getGraphItemRef(e,t){if(null==e){let e=this.activeSelection;return null!=e&&(null==t||t===e.refType)?e:void 0}switch(t){case"branch":return eT(e,"branch")||eG(e,"upstreamStatus")?e.webviewItemValue.ref:void 0;case"revision":return eT(e,"revision")?e.webviewItemValue.ref:void 0;case"stash":return eT(e,"stash")?e.webviewItemValue.ref:void 0;case"tag":return eT(e,"tag")?e.webviewItemValue.ref:void 0;default:return eT(e)?e.webviewItemValue.ref:void 0}}getGraphItemRefs(e,t){if(null==e)return{active:void 0,selection:[]};switch(t){case"branch":if(!eT(e,"branch")&&!eG(e,"upstreamStatus"))return{active:void 0,selection:[]};break;case"revision":if(!eT(e,"revision"))return{active:void 0,selection:[]};break;case"stash":if(!eT(e,"stash"))return{active:void 0,selection:[]};break;case"tag":if(!eT(e,"tag"))return{active:void 0,selection:[]};break;default:if(!eT(e))return{active:void 0,selection:[]}}let i=e.webviewItemsValues?.map(e=>e.webviewItemValue.ref)??[];return i.length||i.push(e.webviewItemValue.ref),{active:e.webviewItemValue.ref,selection:i}}};function ek(e){return null!=e&&(0,L.sc)(e)&&("gitlens.graph"===e.webview||"gitlens.views.graph"===e.webview)}function eG(e,t){return null!=e&&ek(e)&&"object"==typeof e.webviewItemValue&&e.webviewItemValue.type===t}function eT(e,t){return null!=e&&ek(e)&&"object"==typeof e.webviewItemValue&&"ref"in e.webviewItemValue&&(null==t||e.webviewItemValue.ref.refType===t)}function eI(e){return null!=e&&"object"==typeof e&&"ref"in e&&(0,P.cf)(e.ref)}eS([(0,H.Yz)({args:{0:e=>e.toString()}})],GraphWebviewProvider.prototype,"onRepositoryChanged",1),eS([(0,H.Yz)({args:!1})],GraphWebviewProvider.prototype,"onRepositoryFileSystemChanged",1),eS([(0,H.Yz)({args:!1})],GraphWebviewProvider.prototype,"onSubscriptionChanged",1),eS([(0,H.Yz)()],GraphWebviewProvider.prototype,"onEnsureRowRequest",1),eS([(0,O.G)(),(0,H.Yz)()],GraphWebviewProvider.prototype,"onGetMoreRows",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"onOpenPullRequestDetails",1),eS([(0,H.Yz)()],GraphWebviewProvider.prototype,"onSearchRequest",1),eS([(0,H.Yz)()],GraphWebviewProvider.prototype,"updateState",1),eS([(0,H.Yz)()],GraphWebviewProvider.prototype,"updateAvatars",1),eS([(0,H.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeAvatars",1),eS([(0,H.Yz)()],GraphWebviewProvider.prototype,"updateRefsMetadata",1),eS([(0,H.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeRefsMetadata",1),eS([(0,H.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeColumns",1),eS([(0,H.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeScrollMarkers",1),eS([(0,H.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeRefsVisibility",1),eS([(0,H.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeConfiguration",1),eS([(0,H.Yz)()],GraphWebviewProvider.prototype,"notifyDidFetch",1),eS([(0,H.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeRows",1),eS([(0,H.Yz)({args:!1})],GraphWebviewProvider.prototype,"notifyDidChangeRowsStats",1),eS([(0,H.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeWorkingTree",1),eS([(0,H.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeSelection",1),eS([(0,H.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeSubscription",1),eS([(0,H.Yz)()],GraphWebviewProvider.prototype,"notifyDidChangeState",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"fetch",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"pull",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"push",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"createBranch",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"deleteBranch",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"mergeBranchInto",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"openBranchOnRemote",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"publishBranch",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"rebase",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"rebaseToRemote",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"renameBranch",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"cherryPick",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"copy",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"copyMessage",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"copySha",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"openInDetailsView",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"openSCM",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"openCommitOnRemote",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"copyDeepLinkToBranch",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"copyDeepLinkToCommit",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"copyDeepLinkToRepo",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"copyDeepLinkToTag",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"shareAsCloudPatch",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"resetCommit",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"resetToCommit",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"resetToTip",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"revertCommit",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"switchTo",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"hideRef",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"switchToAnother",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"undoCommit",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"saveStash",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"applyStash",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"deleteStash",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"renameStash",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"createTag",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"deleteTag",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"createWorktree",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"createPullRequest",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"openPullRequest",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"openPullRequestChanges",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"openPullRequestComparison",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"openPullRequestOnRemote",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"compareAncestryWithWorking",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"compareHeadWith",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"compareWithMergeBase",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"openChangedFileDiffsWithMergeBase",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"compareWithUpstream",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"compareWorkingWith",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"openFiles",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"openAllChanges",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"openAllChangesWithWorking",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"openRevisions",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"openOnlyChangedFiles",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"addAuthor",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"toggleColumn",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"toggleScrollMarker",1),eS([(0,H.Rm)()],GraphWebviewProvider.prototype,"setColumnMode",1)}};